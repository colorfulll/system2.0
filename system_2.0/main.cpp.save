// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "main.h"
#include <iostream>
#include "help.h"

using namespace std;

int flag1 = -1, flag2 = -1, signal1 = -1, signal2 = -1;
string mycopy;

Fl_Double_Window *window_main=(Fl_Double_Window *)0;
Fl_Input *input=(Fl_Input *)0;
Fl_Button *btnTest=(Fl_Button *)0;
Fl_Return_Button *btnClose=(Fl_Return_Button *)0;
Fl_Double_Window* block1 = window_main = new Fl_Double_Window(305, 135, "welcome!");
Fl_Double_Window* block2 = window_main = new Fl_Double_Window(305, 135, "welcome!");
Fl_Double_Window* block3 = window_main = new Fl_Double_Window(305, 135, "welcome!");
Fl_Double_Window* block4 = window_main = new Fl_Double_Window(305, 135, "welcome!");
extern void bt_callback(Fl_Widget* , void* userdata);
extern void at_callback(Fl_Widget* , void* userdata);
extern void ct_callback(Fl_Widget* , void* userdata);
extern void dt_callback(Fl_Widget* , void* userdata);

void firstBlock()
{
    block1->begin();
    { Fl_Button* o = btnTest = new Fl_Button(10, 50, 100, 25, "login");
      o->callback((Fl_Callback*)bt_callback, (void*)("login"));
    }
    { Fl_Return_Button* o = btnClose = new Fl_Return_Button(195, 50,100, 25, "register");
      o->callback((Fl_Callback*)bt_callback, (void*)("register"));
    }
    block1->end();
    block1->show();
    Fl::run();
    return;
}

void secondBlock()
{
    block2->begin();
    { Fl_Button* o = btnTest = new Fl_Button(10, 50, 100, 25, "manager");
      o->callback((Fl_Callback*)at_callback, (void*)("manager"));
    }
    { Fl_Return_Button* o = btnClose = new Fl_Return_Button(195, 50,100, 25, "user");
      o->callback((Fl_Callback*)at_callback, (void*)("user"));
    }
    block2->end();
    block2->show();
    Fl::run();
    return;
}

void thirdBlock()
{
    block3->begin();
    { Fl_Button* o = btnTest = new Fl_Button(10, 25, 60, 30, "add");
      o->callback((Fl_Callback*)ct_callback, (void*)("add"));
    }
    { Fl_Button* o = btnTest = new Fl_Button(90, 25, 60, 30, "delete");
      o->callback((Fl_Callback*)ct_callback, (void*)("delete"));
    }
    { Fl_Button* o = btnTest = new Fl_Button(170, 25, 60, 30, "search");
      o->callback((Fl_Callback*)ct_callback, (void*)("search"));
    }
    { Fl_Button* o = btnTest = new Fl_Button(10, 75, 60, 30, "show");
      o->callback((Fl_Callback*)ct_callback, (void*)("show"));
    }
    { Fl_Return_Button* o = btnClose = new Fl_Return_Button(90, 75, 60, 30, "keep");
      o->callback((Fl_Callback*)ct_callback, (void*)("keep"));
    }
    block3->end();
    block3->show();
    Fl::run();
    return;
}

void forthBlock()
{
    block4->begin();
    { Fl_Button* o = btnTest = new Fl_Button(10, 40, 100, 25, "item");
      o->callback((Fl_Callback*)dt_callback, (void*)("item"));
    }
    { Fl_Button* o = btnTest = new Fl_Button(130, 40, 100, 25, "food");
      o->callback((Fl_Callback*)dt_callback, (void*)("food"));
    }
    { Fl_Return_Button* o = btnClose = new Fl_Return_Button(250, 40 , 100, 25, "book");
      o->callback((Fl_Callback*)dt_callback, (void*)("book"));
    }
    block4->end();
    block4->show();
    Fl::run();
    return;
}

void bt_callback(Fl_Widget* , void* userdata)
{
    if(userdata == "login") flag1 = 1 ;
    else if (userdata == "register") flag1 = 0;
    block1->hide();
    return;
}

void at_callback(Fl_Widget* , void* userdata)
{
    if(userdata == "manager") flag2 = 1;
    else if (userdata == "user") flag2 = 0;
    block2->hide();
    return;
}

void ct_callback(Fl_Widget* m, void* userdata)
{
    if(userdata == "add" ) signal1 = 1;
    if(userdata == "delete") signal1 = 2;
    if(userdata == "search") signal1 = 3;
    if(userdata == "show") signal1 = 4;
    if(userdata == "keep") signal1 = 5;
    block3->hide();
    return;
}

void dt_callback(Fl_Widget* m, void* userdata)
{
    if(userdata == "item" ) signal2 = 1;
    if(userdata == "food") signal2 = 2;
    if(userdata == "book") signal2 = 3;
    block4->hide();
    return;
}

int main()
{
    HelpList myList;
    FoodList foodList;
    UserList usersList;
    BookList bookList;
    ManagerList managerList;
    string username, password, address, phonenumber;
    while(1)
    {
        flag1 = -1;
        flag2 = -1;
        firstBlock();
        if (flag1 == 1)
        {
            secondBlock();
            if (flag2 ==1)
            {
                blockshow1();
                username = mycopy;
                blockshow2();
                password = mycopy;
                if(!managerList.managerLogin(username,password))
                {
                    cout << "用户名或密码错误"<<endl;
                }
                else break;
            }
            else if(flag2 == 0)
            {
                blockshow1();
                username = mycopy;
                blockshow2();
                password = mycopy;
                if (usersList.userLogin(username, password))
                {
                    cout << "登录成功" << endl;
                    break;
                }
                else cout << "用户名或密码错误" << endl;
            }
        }
        else if(flag1 == 0)
        {
            blockshow1();
            username = mycopy;
            blockshow2();
            password = mycopy;
            blockshow3();
            address = mycopy;
            blockshow4();
            phonenumber = mycopy;
            if(usersList.userRegister(address, phonenumber, username, password))
            {
                cout << "已申请，请等待处理" << endl;
                usersList.listStore();
                break;
            }
            else cout << "该用户名已被占用" << endl;

        }
    }
    if((flag2 == 0)&&(flag1 == 1))
    {
        while(1)  //程序一直在循环中运行
        {
            signal1 = -1;
            int judge = 0;//用于判断循环何时结束
            thirdBlock();
            switch (signal1)
            {
                case 1:
                {
                    signal2 = -1;
                    forthBlock();
                    switch(signal2)
                    {
                        case 1:
                            {
                                string addName;
                                int num;
                                blockshow5();
                                addName = mycopy;
                                cin >> num ;
                                if(myList.addItem(addName, username, num)) cout << "添加成功！"<<endl;
                                else cout << "添加失败！"<<endl;
                                break;
                            }
                        case 2:
                            {
                                string addName, foodExp;
                                int num;
                                blockshow5();
                                addName = mycopy;
                                blockshow6();
                                foodExp = mycopy;
                                cout << "请输入想要添加的数量：" ;
                                cin >> num ;
                                if(foodList.addItem(addName, username, num, foodExp)) cout << "添加成功！"<<endl;
                                else cout << "添加失败！"<<endl;
                                break;
                            }
                        case 3:
                            {
                                string addName, bookAuthor, bookPublisher;
                                int num;
                                blockshow5();
                                addName = mycopy;
                                blockshow7();
                                bookAuthor = mycopy;
                                blockshow8();
                                bookPublisher = mycopy;
                                cout << "请输入想要添加的数量：" ;
                                cin >> num ;
                                if(bookList.addItem(addName, username, num, bookAuthor, bookPublisher)) cout << "添加成功！"<<endl;
                                else cout << "添加失败！"<<endl;
                                break;
                            }
                        default:
                            {
                                cout << "非法输入" << endl;
                                break;
                            }
                    }
                    break;
                }

                case 2:
                {
                    signal2 = -1;
                    forthBlock();
                    switch(signal2)
                    {
                        case 1:
                            {
                                string delName;
                                int delNum;
                                blockshow5();
                                delName = mycopy;
                                cout << "请输入想要删除的数量：";
                                cin >> delNum;
                                if (myList.deleteItem(delName, username, delNum)) cout << "删除成功！" << endl ;
                                else cout << "删除失败" << endl ;
                                break;
                            }
                        case 2:
                            {
                                string delName, delExp;
                                int delNum;
                                blockshow5();
                                delName = mycopy;
                                blockshow6();
                                delExp = mycopy;
                                cout << "请输入想要删除的数量：";
                                cin >> delNum;
                                if (foodList.deleteItem(delName, username, delNum, delExp)) cout << "删除成功！" << endl ;
                                else cout << "删除失败" << endl ;
                                break;
                            }
                        case 3:
                            {
                                string delName, delPublisher;
                                int delNum;
                                blockshow5();
                                delName = mycopy;
                                blockshow8();
                                delPublisher = mycopy;
                                cout << "请输入想要删除的数量：";
                                cin >> delNum;
                                if (bookList.deleteItem(delName, username, delNum, delPublisher)) cout << "删除成功！" << endl ;
                                else cout << "删除失败" << endl ;
                                break;
                            }
                        default:
                            {
                                cout << "非法输入" <<endl;
                                break;
                            }
                    }
                    break;
                }

                case 3:
                {
                    string findName;
                    blockshow5();
                    findName = mycopy;
                    myList.findItem(findName);
                    foodList.findItem(findName);
                    bookList.findItem(findName);
                    cout << endl ;
                    break;
                }

                case 4:
                {
                    myList.presentList();
                    foodList.presentList();
                    bookList.presentList();
                    break;
                }

                case 5:
                {
                    judge = 1;
                    break;
                }

                default:
                {
                    cout << "非法输入" << endl;
                    break;
                }
            }
        if (judge == 1) break;
        }
        myList.listStore();
        foodList.listStore();
        bookList.listStore();
        cout << "保存成功！" ;
    }
        return 0;
}
